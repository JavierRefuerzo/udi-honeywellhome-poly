# coding: utf-8

"""
    Honeywell Home

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from honeywell_home.api_client import ApiClient
from honeywell_home.exceptions import (
    ApiTypeError,
    ApiValueError
)


class DefaultApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def v2_devices_thermostats_device_id_get(self, apikey, user_ref_id, location_id, device_id, **kwargs):  # noqa: E501
        """Return status of a thermostat  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_devices_thermostats_device_id_get(apikey, user_ref_id, location_id, device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str apikey: Your Client ID (required)
        :param str user_ref_id: Your user ID (required)
        :param str location_id: Location ID (required)
        :param str device_id: Device ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Thermostat
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v2_devices_thermostats_device_id_get_with_http_info(apikey, user_ref_id, location_id, device_id, **kwargs)  # noqa: E501

    def v2_devices_thermostats_device_id_get_with_http_info(self, apikey, user_ref_id, location_id, device_id, **kwargs):  # noqa: E501
        """Return status of a thermostat  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_devices_thermostats_device_id_get_with_http_info(apikey, user_ref_id, location_id, device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str apikey: Your Client ID (required)
        :param str user_ref_id: Your user ID (required)
        :param str location_id: Location ID (required)
        :param str device_id: Device ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Thermostat, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['apikey', 'user_ref_id', 'location_id', 'device_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_devices_thermostats_device_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'apikey' is set
        if ('apikey' not in local_var_params or
                local_var_params['apikey'] is None):
            raise ApiValueError("Missing the required parameter `apikey` when calling `v2_devices_thermostats_device_id_get`")  # noqa: E501
        # verify the required parameter 'user_ref_id' is set
        if ('user_ref_id' not in local_var_params or
                local_var_params['user_ref_id'] is None):
            raise ApiValueError("Missing the required parameter `user_ref_id` when calling `v2_devices_thermostats_device_id_get`")  # noqa: E501
        # verify the required parameter 'location_id' is set
        if ('location_id' not in local_var_params or
                local_var_params['location_id'] is None):
            raise ApiValueError("Missing the required parameter `location_id` when calling `v2_devices_thermostats_device_id_get`")  # noqa: E501
        # verify the required parameter 'device_id' is set
        if ('device_id' not in local_var_params or
                local_var_params['device_id'] is None):
            raise ApiValueError("Missing the required parameter `device_id` when calling `v2_devices_thermostats_device_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in local_var_params:
            path_params['deviceId'] = local_var_params['device_id']  # noqa: E501

        query_params = []
        if 'apikey' in local_var_params:
            query_params.append(('apikey', local_var_params['apikey']))  # noqa: E501
        if 'location_id' in local_var_params:
            query_params.append(('locationId', local_var_params['location_id']))  # noqa: E501

        header_params = {}
        if 'user_ref_id' in local_var_params:
            header_params['UserRefId'] = local_var_params['user_ref_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/devices/thermostats/{deviceId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Thermostat',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_devices_thermostats_device_id_group_group_id_rooms_get(self, apikey, user_ref_id, location_id, device_id, group_id, **kwargs):  # noqa: E501
        """Return status of sensors  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_devices_thermostats_device_id_group_group_id_rooms_get(apikey, user_ref_id, location_id, device_id, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str apikey: Your Client ID (required)
        :param str user_ref_id: Your user ID (required)
        :param str location_id: Location ID (required)
        :param str device_id: Device ID (required)
        :param int group_id: Group ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ThermostatSensor
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v2_devices_thermostats_device_id_group_group_id_rooms_get_with_http_info(apikey, user_ref_id, location_id, device_id, group_id, **kwargs)  # noqa: E501

    def v2_devices_thermostats_device_id_group_group_id_rooms_get_with_http_info(self, apikey, user_ref_id, location_id, device_id, group_id, **kwargs):  # noqa: E501
        """Return status of sensors  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_devices_thermostats_device_id_group_group_id_rooms_get_with_http_info(apikey, user_ref_id, location_id, device_id, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str apikey: Your Client ID (required)
        :param str user_ref_id: Your user ID (required)
        :param str location_id: Location ID (required)
        :param str device_id: Device ID (required)
        :param int group_id: Group ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ThermostatSensor, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['apikey', 'user_ref_id', 'location_id', 'device_id', 'group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_devices_thermostats_device_id_group_group_id_rooms_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'apikey' is set
        if ('apikey' not in local_var_params or
                local_var_params['apikey'] is None):
            raise ApiValueError("Missing the required parameter `apikey` when calling `v2_devices_thermostats_device_id_group_group_id_rooms_get`")  # noqa: E501
        # verify the required parameter 'user_ref_id' is set
        if ('user_ref_id' not in local_var_params or
                local_var_params['user_ref_id'] is None):
            raise ApiValueError("Missing the required parameter `user_ref_id` when calling `v2_devices_thermostats_device_id_group_group_id_rooms_get`")  # noqa: E501
        # verify the required parameter 'location_id' is set
        if ('location_id' not in local_var_params or
                local_var_params['location_id'] is None):
            raise ApiValueError("Missing the required parameter `location_id` when calling `v2_devices_thermostats_device_id_group_group_id_rooms_get`")  # noqa: E501
        # verify the required parameter 'device_id' is set
        if ('device_id' not in local_var_params or
                local_var_params['device_id'] is None):
            raise ApiValueError("Missing the required parameter `device_id` when calling `v2_devices_thermostats_device_id_group_group_id_rooms_get`")  # noqa: E501
        # verify the required parameter 'group_id' is set
        if ('group_id' not in local_var_params or
                local_var_params['group_id'] is None):
            raise ApiValueError("Missing the required parameter `group_id` when calling `v2_devices_thermostats_device_id_group_group_id_rooms_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in local_var_params:
            path_params['deviceId'] = local_var_params['device_id']  # noqa: E501
        if 'group_id' in local_var_params:
            path_params['groupId'] = local_var_params['group_id']  # noqa: E501

        query_params = []
        if 'apikey' in local_var_params:
            query_params.append(('apikey', local_var_params['apikey']))  # noqa: E501
        if 'location_id' in local_var_params:
            query_params.append(('locationId', local_var_params['location_id']))  # noqa: E501

        header_params = {}
        if 'user_ref_id' in local_var_params:
            header_params['UserRefId'] = local_var_params['user_ref_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/devices/thermostats/{deviceId}/group/{groupId}/rooms', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ThermostatSensor',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_devices_thermostats_get(self, apikey, user_ref_id, location_id, **kwargs):  # noqa: E501
        """Return all thermostats in a particular locationID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_devices_thermostats_get(apikey, user_ref_id, location_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str apikey: Your Client ID (required)
        :param str user_ref_id: Your user ID (required)
        :param str location_id: Location ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Thermostat]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v2_devices_thermostats_get_with_http_info(apikey, user_ref_id, location_id, **kwargs)  # noqa: E501

    def v2_devices_thermostats_get_with_http_info(self, apikey, user_ref_id, location_id, **kwargs):  # noqa: E501
        """Return all thermostats in a particular locationID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_devices_thermostats_get_with_http_info(apikey, user_ref_id, location_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str apikey: Your Client ID (required)
        :param str user_ref_id: Your user ID (required)
        :param str location_id: Location ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Thermostat], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['apikey', 'user_ref_id', 'location_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_devices_thermostats_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'apikey' is set
        if ('apikey' not in local_var_params or
                local_var_params['apikey'] is None):
            raise ApiValueError("Missing the required parameter `apikey` when calling `v2_devices_thermostats_get`")  # noqa: E501
        # verify the required parameter 'user_ref_id' is set
        if ('user_ref_id' not in local_var_params or
                local_var_params['user_ref_id'] is None):
            raise ApiValueError("Missing the required parameter `user_ref_id` when calling `v2_devices_thermostats_get`")  # noqa: E501
        # verify the required parameter 'location_id' is set
        if ('location_id' not in local_var_params or
                local_var_params['location_id'] is None):
            raise ApiValueError("Missing the required parameter `location_id` when calling `v2_devices_thermostats_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'apikey' in local_var_params:
            query_params.append(('apikey', local_var_params['apikey']))  # noqa: E501
        if 'location_id' in local_var_params:
            query_params.append(('locationId', local_var_params['location_id']))  # noqa: E501

        header_params = {}
        if 'user_ref_id' in local_var_params:
            header_params['UserRefId'] = local_var_params['user_ref_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/devices/thermostats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Thermostat]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_locations_get(self, apikey, user_ref_id, **kwargs):  # noqa: E501
        """Get all locations, this will also return all devices within those locations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_locations_get(apikey, user_ref_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str apikey: Your Client ID (required)
        :param str user_ref_id: Your user ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Location]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.v2_locations_get_with_http_info(apikey, user_ref_id, **kwargs)  # noqa: E501

    def v2_locations_get_with_http_info(self, apikey, user_ref_id, **kwargs):  # noqa: E501
        """Get all locations, this will also return all devices within those locations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_locations_get_with_http_info(apikey, user_ref_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str apikey: Your Client ID (required)
        :param str user_ref_id: Your user ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Location], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['apikey', 'user_ref_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_locations_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'apikey' is set
        if ('apikey' not in local_var_params or
                local_var_params['apikey'] is None):
            raise ApiValueError("Missing the required parameter `apikey` when calling `v2_locations_get`")  # noqa: E501
        # verify the required parameter 'user_ref_id' is set
        if ('user_ref_id' not in local_var_params or
                local_var_params['user_ref_id'] is None):
            raise ApiValueError("Missing the required parameter `user_ref_id` when calling `v2_locations_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'apikey' in local_var_params:
            query_params.append(('apikey', local_var_params['apikey']))  # noqa: E501

        header_params = {}
        if 'user_ref_id' in local_var_params:
            header_params['UserRefId'] = local_var_params['user_ref_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v2/locations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Location]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
