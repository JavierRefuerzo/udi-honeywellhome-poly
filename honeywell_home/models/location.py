# coding: utf-8

"""
    Honeywell Home

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Location(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'location_id': 'int',
        'name': 'str',
        'street_address': 'str',
        'city': 'str',
        'state': 'str',
        'country': 'str',
        'zipcode': 'str',
        'devices': 'list[object]',
        'users': 'list[LocationUsers]',
        'time_zone_id': 'str',
        'time_zone': 'str',
        'iana_time_zone': 'str',
        'daylight_saving_time_enabled': 'bool',
        'geo_fences': 'list[LocationGeoFences]',
        'geo_fence_enabled': 'bool',
        'predictive_air_enabled': 'bool',
        'comfort_level': 'float',
        'geo_fence_notification_enabled': 'bool',
        'geo_fence_notification_type_id': 'float',
        'configuration': 'LocationConfiguration'
    }

    attribute_map = {
        'location_id': 'locationID',
        'name': 'name',
        'street_address': 'streetAddress',
        'city': 'city',
        'state': 'state',
        'country': 'country',
        'zipcode': 'zipcode',
        'devices': 'devices',
        'users': 'users',
        'time_zone_id': 'timeZoneId',
        'time_zone': 'timeZone',
        'iana_time_zone': 'ianaTimeZone',
        'daylight_saving_time_enabled': 'daylightSavingTimeEnabled',
        'geo_fences': 'geoFences',
        'geo_fence_enabled': 'geoFenceEnabled',
        'predictive_air_enabled': 'predictiveAIREnabled',
        'comfort_level': 'comfortLevel',
        'geo_fence_notification_enabled': 'geoFenceNotificationEnabled',
        'geo_fence_notification_type_id': 'geoFenceNotificationTypeId',
        'configuration': 'configuration'
    }

    def __init__(self, location_id=None, name=None, street_address=None, city=None, state=None, country=None, zipcode=None, devices=None, users=None, time_zone_id=None, time_zone=None, iana_time_zone=None, daylight_saving_time_enabled=None, geo_fences=None, geo_fence_enabled=None, predictive_air_enabled=None, comfort_level=None, geo_fence_notification_enabled=None, geo_fence_notification_type_id=None, configuration=None):  # noqa: E501
        """Location - a model defined in OpenAPI"""  # noqa: E501

        self._location_id = None
        self._name = None
        self._street_address = None
        self._city = None
        self._state = None
        self._country = None
        self._zipcode = None
        self._devices = None
        self._users = None
        self._time_zone_id = None
        self._time_zone = None
        self._iana_time_zone = None
        self._daylight_saving_time_enabled = None
        self._geo_fences = None
        self._geo_fence_enabled = None
        self._predictive_air_enabled = None
        self._comfort_level = None
        self._geo_fence_notification_enabled = None
        self._geo_fence_notification_type_id = None
        self._configuration = None
        self.discriminator = None

        if location_id is not None:
            self.location_id = location_id
        if name is not None:
            self.name = name
        if street_address is not None:
            self.street_address = street_address
        if city is not None:
            self.city = city
        if state is not None:
            self.state = state
        if country is not None:
            self.country = country
        if zipcode is not None:
            self.zipcode = zipcode
        if devices is not None:
            self.devices = devices
        if users is not None:
            self.users = users
        if time_zone_id is not None:
            self.time_zone_id = time_zone_id
        if time_zone is not None:
            self.time_zone = time_zone
        if iana_time_zone is not None:
            self.iana_time_zone = iana_time_zone
        if daylight_saving_time_enabled is not None:
            self.daylight_saving_time_enabled = daylight_saving_time_enabled
        if geo_fences is not None:
            self.geo_fences = geo_fences
        if geo_fence_enabled is not None:
            self.geo_fence_enabled = geo_fence_enabled
        if predictive_air_enabled is not None:
            self.predictive_air_enabled = predictive_air_enabled
        if comfort_level is not None:
            self.comfort_level = comfort_level
        if geo_fence_notification_enabled is not None:
            self.geo_fence_notification_enabled = geo_fence_notification_enabled
        if geo_fence_notification_type_id is not None:
            self.geo_fence_notification_type_id = geo_fence_notification_type_id
        if configuration is not None:
            self.configuration = configuration

    @property
    def location_id(self):
        """Gets the location_id of this Location.  # noqa: E501


        :return: The location_id of this Location.  # noqa: E501
        :rtype: int
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this Location.


        :param location_id: The location_id of this Location.  # noqa: E501
        :type: int
        """

        self._location_id = location_id

    @property
    def name(self):
        """Gets the name of this Location.  # noqa: E501


        :return: The name of this Location.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Location.


        :param name: The name of this Location.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def street_address(self):
        """Gets the street_address of this Location.  # noqa: E501


        :return: The street_address of this Location.  # noqa: E501
        :rtype: str
        """
        return self._street_address

    @street_address.setter
    def street_address(self, street_address):
        """Sets the street_address of this Location.


        :param street_address: The street_address of this Location.  # noqa: E501
        :type: str
        """

        self._street_address = street_address

    @property
    def city(self):
        """Gets the city of this Location.  # noqa: E501


        :return: The city of this Location.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Location.


        :param city: The city of this Location.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def state(self):
        """Gets the state of this Location.  # noqa: E501


        :return: The state of this Location.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Location.


        :param state: The state of this Location.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def country(self):
        """Gets the country of this Location.  # noqa: E501


        :return: The country of this Location.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Location.


        :param country: The country of this Location.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def zipcode(self):
        """Gets the zipcode of this Location.  # noqa: E501


        :return: The zipcode of this Location.  # noqa: E501
        :rtype: str
        """
        return self._zipcode

    @zipcode.setter
    def zipcode(self, zipcode):
        """Sets the zipcode of this Location.


        :param zipcode: The zipcode of this Location.  # noqa: E501
        :type: str
        """

        self._zipcode = zipcode

    @property
    def devices(self):
        """Gets the devices of this Location.  # noqa: E501


        :return: The devices of this Location.  # noqa: E501
        :rtype: list[object]
        """
        return self._devices

    @devices.setter
    def devices(self, devices):
        """Sets the devices of this Location.


        :param devices: The devices of this Location.  # noqa: E501
        :type: list[object]
        """

        self._devices = devices

    @property
    def users(self):
        """Gets the users of this Location.  # noqa: E501


        :return: The users of this Location.  # noqa: E501
        :rtype: list[LocationUsers]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this Location.


        :param users: The users of this Location.  # noqa: E501
        :type: list[LocationUsers]
        """

        self._users = users

    @property
    def time_zone_id(self):
        """Gets the time_zone_id of this Location.  # noqa: E501


        :return: The time_zone_id of this Location.  # noqa: E501
        :rtype: str
        """
        return self._time_zone_id

    @time_zone_id.setter
    def time_zone_id(self, time_zone_id):
        """Sets the time_zone_id of this Location.


        :param time_zone_id: The time_zone_id of this Location.  # noqa: E501
        :type: str
        """

        self._time_zone_id = time_zone_id

    @property
    def time_zone(self):
        """Gets the time_zone of this Location.  # noqa: E501


        :return: The time_zone of this Location.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this Location.


        :param time_zone: The time_zone of this Location.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    @property
    def iana_time_zone(self):
        """Gets the iana_time_zone of this Location.  # noqa: E501


        :return: The iana_time_zone of this Location.  # noqa: E501
        :rtype: str
        """
        return self._iana_time_zone

    @iana_time_zone.setter
    def iana_time_zone(self, iana_time_zone):
        """Sets the iana_time_zone of this Location.


        :param iana_time_zone: The iana_time_zone of this Location.  # noqa: E501
        :type: str
        """

        self._iana_time_zone = iana_time_zone

    @property
    def daylight_saving_time_enabled(self):
        """Gets the daylight_saving_time_enabled of this Location.  # noqa: E501


        :return: The daylight_saving_time_enabled of this Location.  # noqa: E501
        :rtype: bool
        """
        return self._daylight_saving_time_enabled

    @daylight_saving_time_enabled.setter
    def daylight_saving_time_enabled(self, daylight_saving_time_enabled):
        """Sets the daylight_saving_time_enabled of this Location.


        :param daylight_saving_time_enabled: The daylight_saving_time_enabled of this Location.  # noqa: E501
        :type: bool
        """

        self._daylight_saving_time_enabled = daylight_saving_time_enabled

    @property
    def geo_fences(self):
        """Gets the geo_fences of this Location.  # noqa: E501


        :return: The geo_fences of this Location.  # noqa: E501
        :rtype: list[LocationGeoFences]
        """
        return self._geo_fences

    @geo_fences.setter
    def geo_fences(self, geo_fences):
        """Sets the geo_fences of this Location.


        :param geo_fences: The geo_fences of this Location.  # noqa: E501
        :type: list[LocationGeoFences]
        """

        self._geo_fences = geo_fences

    @property
    def geo_fence_enabled(self):
        """Gets the geo_fence_enabled of this Location.  # noqa: E501


        :return: The geo_fence_enabled of this Location.  # noqa: E501
        :rtype: bool
        """
        return self._geo_fence_enabled

    @geo_fence_enabled.setter
    def geo_fence_enabled(self, geo_fence_enabled):
        """Sets the geo_fence_enabled of this Location.


        :param geo_fence_enabled: The geo_fence_enabled of this Location.  # noqa: E501
        :type: bool
        """

        self._geo_fence_enabled = geo_fence_enabled

    @property
    def predictive_air_enabled(self):
        """Gets the predictive_air_enabled of this Location.  # noqa: E501


        :return: The predictive_air_enabled of this Location.  # noqa: E501
        :rtype: bool
        """
        return self._predictive_air_enabled

    @predictive_air_enabled.setter
    def predictive_air_enabled(self, predictive_air_enabled):
        """Sets the predictive_air_enabled of this Location.


        :param predictive_air_enabled: The predictive_air_enabled of this Location.  # noqa: E501
        :type: bool
        """

        self._predictive_air_enabled = predictive_air_enabled

    @property
    def comfort_level(self):
        """Gets the comfort_level of this Location.  # noqa: E501


        :return: The comfort_level of this Location.  # noqa: E501
        :rtype: float
        """
        return self._comfort_level

    @comfort_level.setter
    def comfort_level(self, comfort_level):
        """Sets the comfort_level of this Location.


        :param comfort_level: The comfort_level of this Location.  # noqa: E501
        :type: float
        """

        self._comfort_level = comfort_level

    @property
    def geo_fence_notification_enabled(self):
        """Gets the geo_fence_notification_enabled of this Location.  # noqa: E501


        :return: The geo_fence_notification_enabled of this Location.  # noqa: E501
        :rtype: bool
        """
        return self._geo_fence_notification_enabled

    @geo_fence_notification_enabled.setter
    def geo_fence_notification_enabled(self, geo_fence_notification_enabled):
        """Sets the geo_fence_notification_enabled of this Location.


        :param geo_fence_notification_enabled: The geo_fence_notification_enabled of this Location.  # noqa: E501
        :type: bool
        """

        self._geo_fence_notification_enabled = geo_fence_notification_enabled

    @property
    def geo_fence_notification_type_id(self):
        """Gets the geo_fence_notification_type_id of this Location.  # noqa: E501


        :return: The geo_fence_notification_type_id of this Location.  # noqa: E501
        :rtype: float
        """
        return self._geo_fence_notification_type_id

    @geo_fence_notification_type_id.setter
    def geo_fence_notification_type_id(self, geo_fence_notification_type_id):
        """Sets the geo_fence_notification_type_id of this Location.


        :param geo_fence_notification_type_id: The geo_fence_notification_type_id of this Location.  # noqa: E501
        :type: float
        """

        self._geo_fence_notification_type_id = geo_fence_notification_type_id

    @property
    def configuration(self):
        """Gets the configuration of this Location.  # noqa: E501


        :return: The configuration of this Location.  # noqa: E501
        :rtype: LocationConfiguration
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this Location.


        :param configuration: The configuration of this Location.  # noqa: E501
        :type: LocationConfiguration
        """

        self._configuration = configuration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Location):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
