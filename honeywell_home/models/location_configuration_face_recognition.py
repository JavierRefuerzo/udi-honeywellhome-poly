# coding: utf-8

"""
    Honeywell Home

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class LocationConfigurationFaceRecognition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'enabled': 'bool',
        'max_persons': 'float',
        'max_etas': 'float',
        'max_eta_persons': 'float',
        'schedules': 'list[LocationConfigurationFaceRecognitionSchedules]'
    }

    attribute_map = {
        'enabled': 'enabled',
        'max_persons': 'maxPersons',
        'max_etas': 'maxEtas',
        'max_eta_persons': 'maxEtaPersons',
        'schedules': 'schedules'
    }

    def __init__(self, enabled=None, max_persons=None, max_etas=None, max_eta_persons=None, schedules=None):  # noqa: E501
        """LocationConfigurationFaceRecognition - a model defined in OpenAPI"""  # noqa: E501

        self._enabled = None
        self._max_persons = None
        self._max_etas = None
        self._max_eta_persons = None
        self._schedules = None
        self.discriminator = None

        if enabled is not None:
            self.enabled = enabled
        if max_persons is not None:
            self.max_persons = max_persons
        if max_etas is not None:
            self.max_etas = max_etas
        if max_eta_persons is not None:
            self.max_eta_persons = max_eta_persons
        if schedules is not None:
            self.schedules = schedules

    @property
    def enabled(self):
        """Gets the enabled of this LocationConfigurationFaceRecognition.  # noqa: E501


        :return: The enabled of this LocationConfigurationFaceRecognition.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this LocationConfigurationFaceRecognition.


        :param enabled: The enabled of this LocationConfigurationFaceRecognition.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def max_persons(self):
        """Gets the max_persons of this LocationConfigurationFaceRecognition.  # noqa: E501


        :return: The max_persons of this LocationConfigurationFaceRecognition.  # noqa: E501
        :rtype: float
        """
        return self._max_persons

    @max_persons.setter
    def max_persons(self, max_persons):
        """Sets the max_persons of this LocationConfigurationFaceRecognition.


        :param max_persons: The max_persons of this LocationConfigurationFaceRecognition.  # noqa: E501
        :type: float
        """

        self._max_persons = max_persons

    @property
    def max_etas(self):
        """Gets the max_etas of this LocationConfigurationFaceRecognition.  # noqa: E501


        :return: The max_etas of this LocationConfigurationFaceRecognition.  # noqa: E501
        :rtype: float
        """
        return self._max_etas

    @max_etas.setter
    def max_etas(self, max_etas):
        """Sets the max_etas of this LocationConfigurationFaceRecognition.


        :param max_etas: The max_etas of this LocationConfigurationFaceRecognition.  # noqa: E501
        :type: float
        """

        self._max_etas = max_etas

    @property
    def max_eta_persons(self):
        """Gets the max_eta_persons of this LocationConfigurationFaceRecognition.  # noqa: E501


        :return: The max_eta_persons of this LocationConfigurationFaceRecognition.  # noqa: E501
        :rtype: float
        """
        return self._max_eta_persons

    @max_eta_persons.setter
    def max_eta_persons(self, max_eta_persons):
        """Sets the max_eta_persons of this LocationConfigurationFaceRecognition.


        :param max_eta_persons: The max_eta_persons of this LocationConfigurationFaceRecognition.  # noqa: E501
        :type: float
        """

        self._max_eta_persons = max_eta_persons

    @property
    def schedules(self):
        """Gets the schedules of this LocationConfigurationFaceRecognition.  # noqa: E501


        :return: The schedules of this LocationConfigurationFaceRecognition.  # noqa: E501
        :rtype: list[LocationConfigurationFaceRecognitionSchedules]
        """
        return self._schedules

    @schedules.setter
    def schedules(self, schedules):
        """Sets the schedules of this LocationConfigurationFaceRecognition.


        :param schedules: The schedules of this LocationConfigurationFaceRecognition.  # noqa: E501
        :type: list[LocationConfigurationFaceRecognitionSchedules]
        """

        self._schedules = schedules

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocationConfigurationFaceRecognition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
