# coding: utf-8

"""
    Honeywell Home

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class LocationGeoFences(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'geofence_enabled': 'bool',
        'geo_fence_id': 'float',
        'latitude': 'float',
        'longitude': 'float',
        'radius': 'float',
        'geo_occupancy': 'LocationGeoOccupancy'
    }

    attribute_map = {
        'geofence_enabled': 'geofenceEnabled',
        'geo_fence_id': 'geoFenceID',
        'latitude': 'latitude',
        'longitude': 'longitude',
        'radius': 'radius',
        'geo_occupancy': 'geoOccupancy'
    }

    def __init__(self, geofence_enabled=None, geo_fence_id=None, latitude=None, longitude=None, radius=None, geo_occupancy=None):  # noqa: E501
        """LocationGeoFences - a model defined in OpenAPI"""  # noqa: E501

        self._geofence_enabled = None
        self._geo_fence_id = None
        self._latitude = None
        self._longitude = None
        self._radius = None
        self._geo_occupancy = None
        self.discriminator = None

        if geofence_enabled is not None:
            self.geofence_enabled = geofence_enabled
        if geo_fence_id is not None:
            self.geo_fence_id = geo_fence_id
        if latitude is not None:
            self.latitude = latitude
        if longitude is not None:
            self.longitude = longitude
        if radius is not None:
            self.radius = radius
        if geo_occupancy is not None:
            self.geo_occupancy = geo_occupancy

    @property
    def geofence_enabled(self):
        """Gets the geofence_enabled of this LocationGeoFences.  # noqa: E501


        :return: The geofence_enabled of this LocationGeoFences.  # noqa: E501
        :rtype: bool
        """
        return self._geofence_enabled

    @geofence_enabled.setter
    def geofence_enabled(self, geofence_enabled):
        """Sets the geofence_enabled of this LocationGeoFences.


        :param geofence_enabled: The geofence_enabled of this LocationGeoFences.  # noqa: E501
        :type: bool
        """

        self._geofence_enabled = geofence_enabled

    @property
    def geo_fence_id(self):
        """Gets the geo_fence_id of this LocationGeoFences.  # noqa: E501


        :return: The geo_fence_id of this LocationGeoFences.  # noqa: E501
        :rtype: float
        """
        return self._geo_fence_id

    @geo_fence_id.setter
    def geo_fence_id(self, geo_fence_id):
        """Sets the geo_fence_id of this LocationGeoFences.


        :param geo_fence_id: The geo_fence_id of this LocationGeoFences.  # noqa: E501
        :type: float
        """

        self._geo_fence_id = geo_fence_id

    @property
    def latitude(self):
        """Gets the latitude of this LocationGeoFences.  # noqa: E501


        :return: The latitude of this LocationGeoFences.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this LocationGeoFences.


        :param latitude: The latitude of this LocationGeoFences.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this LocationGeoFences.  # noqa: E501


        :return: The longitude of this LocationGeoFences.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this LocationGeoFences.


        :param longitude: The longitude of this LocationGeoFences.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def radius(self):
        """Gets the radius of this LocationGeoFences.  # noqa: E501


        :return: The radius of this LocationGeoFences.  # noqa: E501
        :rtype: float
        """
        return self._radius

    @radius.setter
    def radius(self, radius):
        """Sets the radius of this LocationGeoFences.


        :param radius: The radius of this LocationGeoFences.  # noqa: E501
        :type: float
        """

        self._radius = radius

    @property
    def geo_occupancy(self):
        """Gets the geo_occupancy of this LocationGeoFences.  # noqa: E501


        :return: The geo_occupancy of this LocationGeoFences.  # noqa: E501
        :rtype: LocationGeoOccupancy
        """
        return self._geo_occupancy

    @geo_occupancy.setter
    def geo_occupancy(self, geo_occupancy):
        """Sets the geo_occupancy of this LocationGeoFences.


        :param geo_occupancy: The geo_occupancy of this LocationGeoFences.  # noqa: E501
        :type: LocationGeoOccupancy
        """

        self._geo_occupancy = geo_occupancy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocationGeoFences):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
