# coding: utf-8

"""
    Honeywell Home

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class LocationUsers(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'user_id': 'int',
        'username': 'str',
        'firstname': 'str',
        'lastname': 'str',
        'created': 'float',
        'deleted': 'float',
        'activated': 'bool',
        'connected_home_account_exists': 'bool',
        'location_role_mapping': 'list[LocationLocationRoleMapping]',
        'is_opt_out': 'str',
        'is_current_user': 'bool'
    }

    attribute_map = {
        'user_id': 'userID',
        'username': 'username',
        'firstname': 'firstname',
        'lastname': 'lastname',
        'created': 'created',
        'deleted': 'deleted',
        'activated': 'activated',
        'connected_home_account_exists': 'connectedHomeAccountExists',
        'location_role_mapping': 'locationRoleMapping',
        'is_opt_out': 'isOptOut',
        'is_current_user': 'isCurrentUser'
    }

    def __init__(self, user_id=None, username=None, firstname=None, lastname=None, created=None, deleted=None, activated=None, connected_home_account_exists=None, location_role_mapping=None, is_opt_out=None, is_current_user=None):  # noqa: E501
        """LocationUsers - a model defined in OpenAPI"""  # noqa: E501

        self._user_id = None
        self._username = None
        self._firstname = None
        self._lastname = None
        self._created = None
        self._deleted = None
        self._activated = None
        self._connected_home_account_exists = None
        self._location_role_mapping = None
        self._is_opt_out = None
        self._is_current_user = None
        self.discriminator = None

        if user_id is not None:
            self.user_id = user_id
        if username is not None:
            self.username = username
        if firstname is not None:
            self.firstname = firstname
        if lastname is not None:
            self.lastname = lastname
        if created is not None:
            self.created = created
        if deleted is not None:
            self.deleted = deleted
        if activated is not None:
            self.activated = activated
        if connected_home_account_exists is not None:
            self.connected_home_account_exists = connected_home_account_exists
        if location_role_mapping is not None:
            self.location_role_mapping = location_role_mapping
        if is_opt_out is not None:
            self.is_opt_out = is_opt_out
        if is_current_user is not None:
            self.is_current_user = is_current_user

    @property
    def user_id(self):
        """Gets the user_id of this LocationUsers.  # noqa: E501


        :return: The user_id of this LocationUsers.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this LocationUsers.


        :param user_id: The user_id of this LocationUsers.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def username(self):
        """Gets the username of this LocationUsers.  # noqa: E501


        :return: The username of this LocationUsers.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this LocationUsers.


        :param username: The username of this LocationUsers.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def firstname(self):
        """Gets the firstname of this LocationUsers.  # noqa: E501


        :return: The firstname of this LocationUsers.  # noqa: E501
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this LocationUsers.


        :param firstname: The firstname of this LocationUsers.  # noqa: E501
        :type: str
        """

        self._firstname = firstname

    @property
    def lastname(self):
        """Gets the lastname of this LocationUsers.  # noqa: E501


        :return: The lastname of this LocationUsers.  # noqa: E501
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this LocationUsers.


        :param lastname: The lastname of this LocationUsers.  # noqa: E501
        :type: str
        """

        self._lastname = lastname

    @property
    def created(self):
        """Gets the created of this LocationUsers.  # noqa: E501


        :return: The created of this LocationUsers.  # noqa: E501
        :rtype: float
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this LocationUsers.


        :param created: The created of this LocationUsers.  # noqa: E501
        :type: float
        """

        self._created = created

    @property
    def deleted(self):
        """Gets the deleted of this LocationUsers.  # noqa: E501


        :return: The deleted of this LocationUsers.  # noqa: E501
        :rtype: float
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this LocationUsers.


        :param deleted: The deleted of this LocationUsers.  # noqa: E501
        :type: float
        """

        self._deleted = deleted

    @property
    def activated(self):
        """Gets the activated of this LocationUsers.  # noqa: E501


        :return: The activated of this LocationUsers.  # noqa: E501
        :rtype: bool
        """
        return self._activated

    @activated.setter
    def activated(self, activated):
        """Sets the activated of this LocationUsers.


        :param activated: The activated of this LocationUsers.  # noqa: E501
        :type: bool
        """

        self._activated = activated

    @property
    def connected_home_account_exists(self):
        """Gets the connected_home_account_exists of this LocationUsers.  # noqa: E501


        :return: The connected_home_account_exists of this LocationUsers.  # noqa: E501
        :rtype: bool
        """
        return self._connected_home_account_exists

    @connected_home_account_exists.setter
    def connected_home_account_exists(self, connected_home_account_exists):
        """Sets the connected_home_account_exists of this LocationUsers.


        :param connected_home_account_exists: The connected_home_account_exists of this LocationUsers.  # noqa: E501
        :type: bool
        """

        self._connected_home_account_exists = connected_home_account_exists

    @property
    def location_role_mapping(self):
        """Gets the location_role_mapping of this LocationUsers.  # noqa: E501


        :return: The location_role_mapping of this LocationUsers.  # noqa: E501
        :rtype: list[LocationLocationRoleMapping]
        """
        return self._location_role_mapping

    @location_role_mapping.setter
    def location_role_mapping(self, location_role_mapping):
        """Sets the location_role_mapping of this LocationUsers.


        :param location_role_mapping: The location_role_mapping of this LocationUsers.  # noqa: E501
        :type: list[LocationLocationRoleMapping]
        """

        self._location_role_mapping = location_role_mapping

    @property
    def is_opt_out(self):
        """Gets the is_opt_out of this LocationUsers.  # noqa: E501


        :return: The is_opt_out of this LocationUsers.  # noqa: E501
        :rtype: str
        """
        return self._is_opt_out

    @is_opt_out.setter
    def is_opt_out(self, is_opt_out):
        """Sets the is_opt_out of this LocationUsers.


        :param is_opt_out: The is_opt_out of this LocationUsers.  # noqa: E501
        :type: str
        """

        self._is_opt_out = is_opt_out

    @property
    def is_current_user(self):
        """Gets the is_current_user of this LocationUsers.  # noqa: E501


        :return: The is_current_user of this LocationUsers.  # noqa: E501
        :rtype: bool
        """
        return self._is_current_user

    @is_current_user.setter
    def is_current_user(self, is_current_user):
        """Sets the is_current_user of this LocationUsers.


        :param is_current_user: The is_current_user of this LocationUsers.  # noqa: E501
        :type: bool
        """

        self._is_current_user = is_current_user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocationUsers):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
