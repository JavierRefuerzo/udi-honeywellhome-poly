# coding: utf-8

"""
    Honeywell Home

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ThermostatSensorAccessories(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'accessory_id': 'int',
        'accessory_attribute': 'ThermostatSensorAccessoryAttribute',
        'accessory_value': 'ThermostatSensorAccessoryValue'
    }

    attribute_map = {
        'accessory_id': 'accessoryId',
        'accessory_attribute': 'accessoryAttribute',
        'accessory_value': 'accessoryValue'
    }

    def __init__(self, accessory_id=None, accessory_attribute=None, accessory_value=None):  # noqa: E501
        """ThermostatSensorAccessories - a model defined in OpenAPI"""  # noqa: E501

        self._accessory_id = None
        self._accessory_attribute = None
        self._accessory_value = None
        self.discriminator = None

        if accessory_id is not None:
            self.accessory_id = accessory_id
        if accessory_attribute is not None:
            self.accessory_attribute = accessory_attribute
        if accessory_value is not None:
            self.accessory_value = accessory_value

    @property
    def accessory_id(self):
        """Gets the accessory_id of this ThermostatSensorAccessories.  # noqa: E501


        :return: The accessory_id of this ThermostatSensorAccessories.  # noqa: E501
        :rtype: int
        """
        return self._accessory_id

    @accessory_id.setter
    def accessory_id(self, accessory_id):
        """Sets the accessory_id of this ThermostatSensorAccessories.


        :param accessory_id: The accessory_id of this ThermostatSensorAccessories.  # noqa: E501
        :type: int
        """

        self._accessory_id = accessory_id

    @property
    def accessory_attribute(self):
        """Gets the accessory_attribute of this ThermostatSensorAccessories.  # noqa: E501


        :return: The accessory_attribute of this ThermostatSensorAccessories.  # noqa: E501
        :rtype: ThermostatSensorAccessoryAttribute
        """
        return self._accessory_attribute

    @accessory_attribute.setter
    def accessory_attribute(self, accessory_attribute):
        """Sets the accessory_attribute of this ThermostatSensorAccessories.


        :param accessory_attribute: The accessory_attribute of this ThermostatSensorAccessories.  # noqa: E501
        :type: ThermostatSensorAccessoryAttribute
        """

        self._accessory_attribute = accessory_attribute

    @property
    def accessory_value(self):
        """Gets the accessory_value of this ThermostatSensorAccessories.  # noqa: E501


        :return: The accessory_value of this ThermostatSensorAccessories.  # noqa: E501
        :rtype: ThermostatSensorAccessoryValue
        """
        return self._accessory_value

    @accessory_value.setter
    def accessory_value(self, accessory_value):
        """Sets the accessory_value of this ThermostatSensorAccessories.


        :param accessory_value: The accessory_value of this ThermostatSensorAccessories.  # noqa: E501
        :type: ThermostatSensorAccessoryValue
        """

        self._accessory_value = accessory_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ThermostatSensorAccessories):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
