# coding: utf-8

"""
    Honeywell Home

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ThermostatSensorAccessoryAttribute(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'connection_method': 'str',
        'name': 'str',
        'model': 'str',
        'serial_number': 'str',
        'software_revision': 'str',
        'hardware_revision': 'str'
    }

    attribute_map = {
        'type': 'type',
        'connection_method': 'connectionMethod',
        'name': 'name',
        'model': 'model',
        'serial_number': 'serialNumber',
        'software_revision': 'softwareRevision',
        'hardware_revision': 'hardwareRevision'
    }

    def __init__(self, type=None, connection_method=None, name=None, model=None, serial_number=None, software_revision=None, hardware_revision=None):  # noqa: E501
        """ThermostatSensorAccessoryAttribute - a model defined in OpenAPI"""  # noqa: E501

        self._type = None
        self._connection_method = None
        self._name = None
        self._model = None
        self._serial_number = None
        self._software_revision = None
        self._hardware_revision = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if connection_method is not None:
            self.connection_method = connection_method
        if name is not None:
            self.name = name
        if model is not None:
            self.model = model
        if serial_number is not None:
            self.serial_number = serial_number
        if software_revision is not None:
            self.software_revision = software_revision
        if hardware_revision is not None:
            self.hardware_revision = hardware_revision

    @property
    def type(self):
        """Gets the type of this ThermostatSensorAccessoryAttribute.  # noqa: E501


        :return: The type of this ThermostatSensorAccessoryAttribute.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ThermostatSensorAccessoryAttribute.


        :param type: The type of this ThermostatSensorAccessoryAttribute.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def connection_method(self):
        """Gets the connection_method of this ThermostatSensorAccessoryAttribute.  # noqa: E501


        :return: The connection_method of this ThermostatSensorAccessoryAttribute.  # noqa: E501
        :rtype: str
        """
        return self._connection_method

    @connection_method.setter
    def connection_method(self, connection_method):
        """Sets the connection_method of this ThermostatSensorAccessoryAttribute.


        :param connection_method: The connection_method of this ThermostatSensorAccessoryAttribute.  # noqa: E501
        :type: str
        """

        self._connection_method = connection_method

    @property
    def name(self):
        """Gets the name of this ThermostatSensorAccessoryAttribute.  # noqa: E501


        :return: The name of this ThermostatSensorAccessoryAttribute.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ThermostatSensorAccessoryAttribute.


        :param name: The name of this ThermostatSensorAccessoryAttribute.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def model(self):
        """Gets the model of this ThermostatSensorAccessoryAttribute.  # noqa: E501


        :return: The model of this ThermostatSensorAccessoryAttribute.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this ThermostatSensorAccessoryAttribute.


        :param model: The model of this ThermostatSensorAccessoryAttribute.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def serial_number(self):
        """Gets the serial_number of this ThermostatSensorAccessoryAttribute.  # noqa: E501


        :return: The serial_number of this ThermostatSensorAccessoryAttribute.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this ThermostatSensorAccessoryAttribute.


        :param serial_number: The serial_number of this ThermostatSensorAccessoryAttribute.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def software_revision(self):
        """Gets the software_revision of this ThermostatSensorAccessoryAttribute.  # noqa: E501


        :return: The software_revision of this ThermostatSensorAccessoryAttribute.  # noqa: E501
        :rtype: str
        """
        return self._software_revision

    @software_revision.setter
    def software_revision(self, software_revision):
        """Sets the software_revision of this ThermostatSensorAccessoryAttribute.


        :param software_revision: The software_revision of this ThermostatSensorAccessoryAttribute.  # noqa: E501
        :type: str
        """

        self._software_revision = software_revision

    @property
    def hardware_revision(self):
        """Gets the hardware_revision of this ThermostatSensorAccessoryAttribute.  # noqa: E501


        :return: The hardware_revision of this ThermostatSensorAccessoryAttribute.  # noqa: E501
        :rtype: str
        """
        return self._hardware_revision

    @hardware_revision.setter
    def hardware_revision(self, hardware_revision):
        """Sets the hardware_revision of this ThermostatSensorAccessoryAttribute.


        :param hardware_revision: The hardware_revision of this ThermostatSensorAccessoryAttribute.  # noqa: E501
        :type: str
        """

        self._hardware_revision = hardware_revision

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ThermostatSensorAccessoryAttribute):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
