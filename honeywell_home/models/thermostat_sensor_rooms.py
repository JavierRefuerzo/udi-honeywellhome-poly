# coding: utf-8

"""
    Honeywell Home

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ThermostatSensorRooms(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'name': 'str',
        'type': 'str',
        'avg_temperature': 'float',
        'avg_humidity': 'float',
        'accessories': 'list[ThermostatSensorAccessories]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'type': 'type',
        'avg_temperature': 'avgTemperature',
        'avg_humidity': 'avgHumidity',
        'accessories': 'accessories'
    }

    def __init__(self, id=None, name=None, type=None, avg_temperature=None, avg_humidity=None, accessories=None):  # noqa: E501
        """ThermostatSensorRooms - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._name = None
        self._type = None
        self._avg_temperature = None
        self._avg_humidity = None
        self._accessories = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if avg_temperature is not None:
            self.avg_temperature = avg_temperature
        if avg_humidity is not None:
            self.avg_humidity = avg_humidity
        if accessories is not None:
            self.accessories = accessories

    @property
    def id(self):
        """Gets the id of this ThermostatSensorRooms.  # noqa: E501


        :return: The id of this ThermostatSensorRooms.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ThermostatSensorRooms.


        :param id: The id of this ThermostatSensorRooms.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ThermostatSensorRooms.  # noqa: E501


        :return: The name of this ThermostatSensorRooms.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ThermostatSensorRooms.


        :param name: The name of this ThermostatSensorRooms.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this ThermostatSensorRooms.  # noqa: E501


        :return: The type of this ThermostatSensorRooms.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ThermostatSensorRooms.


        :param type: The type of this ThermostatSensorRooms.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def avg_temperature(self):
        """Gets the avg_temperature of this ThermostatSensorRooms.  # noqa: E501


        :return: The avg_temperature of this ThermostatSensorRooms.  # noqa: E501
        :rtype: float
        """
        return self._avg_temperature

    @avg_temperature.setter
    def avg_temperature(self, avg_temperature):
        """Sets the avg_temperature of this ThermostatSensorRooms.


        :param avg_temperature: The avg_temperature of this ThermostatSensorRooms.  # noqa: E501
        :type: float
        """

        self._avg_temperature = avg_temperature

    @property
    def avg_humidity(self):
        """Gets the avg_humidity of this ThermostatSensorRooms.  # noqa: E501


        :return: The avg_humidity of this ThermostatSensorRooms.  # noqa: E501
        :rtype: float
        """
        return self._avg_humidity

    @avg_humidity.setter
    def avg_humidity(self, avg_humidity):
        """Sets the avg_humidity of this ThermostatSensorRooms.


        :param avg_humidity: The avg_humidity of this ThermostatSensorRooms.  # noqa: E501
        :type: float
        """

        self._avg_humidity = avg_humidity

    @property
    def accessories(self):
        """Gets the accessories of this ThermostatSensorRooms.  # noqa: E501


        :return: The accessories of this ThermostatSensorRooms.  # noqa: E501
        :rtype: list[ThermostatSensorAccessories]
        """
        return self._accessories

    @accessories.setter
    def accessories(self, accessories):
        """Sets the accessories of this ThermostatSensorRooms.


        :param accessories: The accessories of this ThermostatSensorRooms.  # noqa: E501
        :type: list[ThermostatSensorAccessories]
        """

        self._accessories = accessories

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ThermostatSensorRooms):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
