# coding: utf-8

"""
    Honeywell Home

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ThermostatSettingsFan(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'allowed_modes': 'list[str]',
        'changeable_values': 'ThermostatSettingsFanChangeableValues'
    }

    attribute_map = {
        'allowed_modes': 'allowedModes',
        'changeable_values': 'changeableValues'
    }

    def __init__(self, allowed_modes=None, changeable_values=None):  # noqa: E501
        """ThermostatSettingsFan - a model defined in OpenAPI"""  # noqa: E501

        self._allowed_modes = None
        self._changeable_values = None
        self.discriminator = None

        if allowed_modes is not None:
            self.allowed_modes = allowed_modes
        if changeable_values is not None:
            self.changeable_values = changeable_values

    @property
    def allowed_modes(self):
        """Gets the allowed_modes of this ThermostatSettingsFan.  # noqa: E501


        :return: The allowed_modes of this ThermostatSettingsFan.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_modes

    @allowed_modes.setter
    def allowed_modes(self, allowed_modes):
        """Sets the allowed_modes of this ThermostatSettingsFan.


        :param allowed_modes: The allowed_modes of this ThermostatSettingsFan.  # noqa: E501
        :type: list[str]
        """

        self._allowed_modes = allowed_modes

    @property
    def changeable_values(self):
        """Gets the changeable_values of this ThermostatSettingsFan.  # noqa: E501


        :return: The changeable_values of this ThermostatSettingsFan.  # noqa: E501
        :rtype: ThermostatSettingsFanChangeableValues
        """
        return self._changeable_values

    @changeable_values.setter
    def changeable_values(self, changeable_values):
        """Sets the changeable_values of this ThermostatSettingsFan.


        :param changeable_values: The changeable_values of this ThermostatSettingsFan.  # noqa: E501
        :type: ThermostatSettingsFanChangeableValues
        """

        self._changeable_values = changeable_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ThermostatSettingsFan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
